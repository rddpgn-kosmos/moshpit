// Generated by Haxe 4.0.0-rc.3+e3df7a448
(function ($hx_exports, $global) { "use strict";
function $extend(from, fields) {
	var proto = Object.create(from);
	for (var name in fields) proto[name] = fields[name];
	if( fields.toString !== Object.prototype.toString ) proto.toString = fields.toString;
	return proto;
}
var pixi_plugins_app_Application = function() {
	this._animationFrameId = null;
	this.pixelRatio = 1;
	this.autoResize = true;
	this.transparent = false;
	this.antialias = false;
	this.forceFXAA = false;
	this.roundPixels = false;
	this.legacy = false;
	this.clearBeforeRender = true;
	this.preserveDrawingBuffer = false;
	this.backgroundColor = 16777215;
	this.width = window.innerWidth;
	this.height = window.innerHeight;
	this.position = "static";
};
pixi_plugins_app_Application.__name__ = true;
pixi_plugins_app_Application.prototype = {
	start: function(rendererType,parentDom,canvasElement) {
		if(rendererType == null) {
			rendererType = "auto";
		}
		if(canvasElement == null) {
			this.canvas = window.document.createElement("canvas");
			this.canvas.style.width = this.width + "px";
			this.canvas.style.height = this.height + "px";
			this.canvas.style.position = this.position;
		} else {
			this.canvas = canvasElement;
		}
		if(this.autoResize) {
			window.onresize = $bind(this,this._onWindowResize);
		}
		var renderingOptions = { };
		renderingOptions.width = this.width | 0;
		renderingOptions.height = this.height | 0;
		renderingOptions.view = this.canvas;
		renderingOptions.backgroundColor = this.backgroundColor;
		renderingOptions.resolution = this.pixelRatio;
		renderingOptions.antialias = this.antialias;
		renderingOptions.forceFXAA = this.forceFXAA;
		renderingOptions.autoResize = this.autoResize;
		renderingOptions.transparent = this.transparent;
		renderingOptions.clearBeforeRender = this.clearBeforeRender;
		renderingOptions.preserveDrawingBuffer = this.preserveDrawingBuffer;
		renderingOptions.roundPixels = this.roundPixels;
		renderingOptions.legacy = this.legacy;
		if(rendererType == null) {
			this.app = new PIXI.Application(renderingOptions);
		} else if(rendererType == "canvas") {
			renderingOptions.forceCanvas = true;
			this.app = new PIXI.Application(renderingOptions);
		} else {
			this.app = new PIXI.Application(renderingOptions);
		}
		this.stage = this.app.stage;
		this.renderer = this.app.renderer;
		if(parentDom == null) {
			window.document.body.appendChild(this.app.view);
		} else {
			parentDom.appendChild(this.app.view);
		}
		this.app.ticker.add($bind(this,this._onRequestAnimationFrame));
	}
	,_onWindowResize: function(event) {
		this.width = window.innerWidth;
		this.height = window.innerHeight;
		this.app.renderer.resize(this.width,this.height);
		this.canvas.style.width = this.width + "px";
		this.canvas.style.height = this.height + "px";
		if(this.onResize != null) {
			this.onResize();
		}
	}
	,_onRequestAnimationFrame: function() {
		if(this.onUpdate != null) {
			this.onUpdate(this.app.ticker.deltaTime);
		}
	}
	,__class__: pixi_plugins_app_Application
};
var AppController = function() {
	pixi_plugins_app_Application.call(this);
	this.applySettings();
	pixi_plugins_app_Application.prototype.start.call(this);
	var game1 = new game_Game(this);
	this.onUpdate = $bind(game1,game1.update);
};
AppController.__name__ = true;
AppController.__super__ = pixi_plugins_app_Application;
AppController.prototype = $extend(pixi_plugins_app_Application.prototype,{
	applySettings: function() {
		this.position = "fixed";
		this.width = Settings.getGameViewWidth();
		this.height = Settings.getGameViewHeight();
		this.backgroundColor = Settings.getBackgroundColor();
		this.transparent = false;
		this.antialias = false;
	}
	,__class__: AppController
});
var HxOverrides = function() { };
HxOverrides.__name__ = true;
HxOverrides.iter = function(a) {
	return { cur : 0, arr : a, hasNext : function() {
		return this.cur < this.arr.length;
	}, next : function() {
		return this.arr[this.cur++];
	}};
};
var Main = function() { };
Main.__name__ = true;
Main.main = function() {
	new AppController();
};
Math.__name__ = true;
var Perf = $hx_exports["Perf"] = function(pos,offset) {
	if(offset == null) {
		offset = 0;
	}
	if(pos == null) {
		pos = "TR";
	}
	this._perfObj = window.performance;
	if(Reflect.field(this._perfObj,"memory") != null) {
		this._memoryObj = Reflect.field(this._perfObj,"memory");
	}
	this._memCheck = this._perfObj != null && this._memoryObj != null && this._memoryObj.totalJSHeapSize > 0;
	this._pos = pos;
	this._offset = offset;
	this.currentFps = 60;
	this.currentMs = 0;
	this.currentMem = "0";
	this.lowFps = 60;
	this.avgFps = 60;
	this._measureCount = 0;
	this._totalFps = 0;
	this._time = 0;
	this._ticks = 0;
	this._fpsMin = 60;
	this._fpsMax = 60;
	this._startTime = this._perfObj != null && this._perfObj.now != null ? this._perfObj.now() : new Date().getTime();
	this._prevTime = -Perf.MEASUREMENT_INTERVAL;
	this._createFpsDom();
	this._createMsDom();
	if(this._memCheck) {
		this._createMemoryDom();
	}
	if(window.requestAnimationFrame != null) {
		this.RAF = ($_=window,$bind($_,$_.requestAnimationFrame));
	} else if(window.mozRequestAnimationFrame != null) {
		this.RAF = window.mozRequestAnimationFrame;
	} else if(window.webkitRequestAnimationFrame != null) {
		this.RAF = window.webkitRequestAnimationFrame;
	} else if(window.msRequestAnimationFrame != null) {
		this.RAF = window.msRequestAnimationFrame;
	}
	if(window.cancelAnimationFrame != null) {
		this.CAF = ($_=window,$bind($_,$_.cancelAnimationFrame));
	} else if(window.mozCancelAnimationFrame != null) {
		this.CAF = window.mozCancelAnimationFrame;
	} else if(window.webkitCancelAnimationFrame != null) {
		this.CAF = window.webkitCancelAnimationFrame;
	} else if(window.msCancelAnimationFrame != null) {
		this.CAF = window.msCancelAnimationFrame;
	}
	if(this.RAF != null) {
		this._raf = this.RAF.apply(window,[$bind(this,this._tick)]);
	}
};
Perf.__name__ = true;
Perf.prototype = {
	_init: function() {
		this.currentFps = 60;
		this.currentMs = 0;
		this.currentMem = "0";
		this.lowFps = 60;
		this.avgFps = 60;
		this._measureCount = 0;
		this._totalFps = 0;
		this._time = 0;
		this._ticks = 0;
		this._fpsMin = 60;
		this._fpsMax = 60;
		this._startTime = this._perfObj != null && this._perfObj.now != null ? this._perfObj.now() : new Date().getTime();
		this._prevTime = -Perf.MEASUREMENT_INTERVAL;
	}
	,_now: function() {
		if(this._perfObj != null && this._perfObj.now != null) {
			return this._perfObj.now();
		} else {
			return new Date().getTime();
		}
	}
	,_tick: function(val) {
		var time = this._perfObj != null && this._perfObj.now != null ? this._perfObj.now() : new Date().getTime();
		this._ticks++;
		if(this._raf != null && time > this._prevTime + Perf.MEASUREMENT_INTERVAL) {
			this.currentMs = Math.round(time - this._startTime);
			this.ms.innerHTML = "MS: " + this.currentMs;
			this.currentFps = Math.round(this._ticks * 1000 / (time - this._prevTime));
			if(this.currentFps > 0 && val > Perf.DELAY_TIME) {
				this._measureCount++;
				this._totalFps += this.currentFps;
				this.lowFps = this._fpsMin = Math.min(this._fpsMin,this.currentFps);
				this._fpsMax = Math.max(this._fpsMax,this.currentFps);
				this.avgFps = Math.round(this._totalFps / this._measureCount);
			}
			this.fps.innerHTML = "FPS: " + this.currentFps + " (" + this._fpsMin + "-" + this._fpsMax + ")";
			if(this.currentFps >= 30) {
				this.fps.style.backgroundColor = Perf.FPS_BG_CLR;
			} else if(this.currentFps >= 15) {
				this.fps.style.backgroundColor = Perf.FPS_WARN_BG_CLR;
			} else {
				this.fps.style.backgroundColor = Perf.FPS_PROB_BG_CLR;
			}
			this._prevTime = time;
			this._ticks = 0;
			if(this._memCheck) {
				this.currentMem = this._getFormattedSize(this._memoryObj.usedJSHeapSize,2);
				this.memory.innerHTML = "MEM: " + this.currentMem;
			}
		}
		this._startTime = time;
		if(this._raf != null) {
			this._raf = this.RAF.apply(window,[$bind(this,this._tick)]);
		}
	}
	,_createDiv: function(id,top) {
		if(top == null) {
			top = 0;
		}
		var div = window.document.createElement("div");
		div.id = id;
		div.className = id;
		div.style.position = "absolute";
		switch(this._pos) {
		case "BL":
			div.style.left = this._offset + "px";
			div.style.bottom = (this._memCheck ? 48 : 32) - top + "px";
			break;
		case "BR":
			div.style.right = this._offset + "px";
			div.style.bottom = (this._memCheck ? 48 : 32) - top + "px";
			break;
		case "TL":
			div.style.left = this._offset + "px";
			div.style.top = top + "px";
			break;
		case "TR":
			div.style.right = this._offset + "px";
			div.style.top = top + "px";
			break;
		}
		div.style.width = "80px";
		div.style.height = "12px";
		div.style.lineHeight = "12px";
		div.style.padding = "2px";
		div.style.fontFamily = Perf.FONT_FAMILY;
		div.style.fontSize = "9px";
		div.style.fontWeight = "bold";
		div.style.textAlign = "center";
		window.document.body.appendChild(div);
		return div;
	}
	,_createFpsDom: function() {
		this.fps = this._createDiv("fps");
		this.fps.style.backgroundColor = Perf.FPS_BG_CLR;
		this.fps.style.zIndex = "995";
		this.fps.style.color = Perf.FPS_TXT_CLR;
		this.fps.innerHTML = "FPS: 0";
	}
	,_createMsDom: function() {
		this.ms = this._createDiv("ms",16);
		this.ms.style.backgroundColor = Perf.MS_BG_CLR;
		this.ms.style.zIndex = "996";
		this.ms.style.color = Perf.MS_TXT_CLR;
		this.ms.innerHTML = "MS: 0";
	}
	,_createMemoryDom: function() {
		this.memory = this._createDiv("memory",32);
		this.memory.style.backgroundColor = Perf.MEM_BG_CLR;
		this.memory.style.color = Perf.MEM_TXT_CLR;
		this.memory.style.zIndex = "997";
		this.memory.innerHTML = "MEM: 0";
	}
	,_getFormattedSize: function(bytes,frac) {
		if(frac == null) {
			frac = 0;
		}
		var sizes = ["Bytes","KB","MB","GB","TB"];
		if(bytes == 0) {
			return "0";
		}
		var precision = Math.pow(10,frac);
		var i = Math.floor(Math.log(bytes) / Math.log(1024));
		return Math.round(bytes * precision / Math.pow(1024,i)) / precision + " " + sizes[i];
	}
	,addInfo: function(val) {
		this.info = this._createDiv("info",this._memCheck ? 48 : 32);
		this.info.style.backgroundColor = Perf.INFO_BG_CLR;
		this.info.style.color = Perf.INFO_TXT_CLR;
		this.info.style.zIndex = "998";
		this.info.innerHTML = val;
	}
	,clearInfo: function() {
		if(this.info != null) {
			window.document.body.removeChild(this.info);
			this.info = null;
		}
	}
	,destroy: function() {
		this.CAF.apply(window,[this._raf]);
		this._raf = null;
		this._perfObj = null;
		this._memoryObj = null;
		if(this.fps != null) {
			window.document.body.removeChild(this.fps);
			this.fps = null;
		}
		if(this.ms != null) {
			window.document.body.removeChild(this.ms);
			this.ms = null;
		}
		if(this.memory != null) {
			window.document.body.removeChild(this.memory);
			this.memory = null;
		}
		this.clearInfo();
		this.currentFps = 60;
		this.currentMs = 0;
		this.currentMem = "0";
		this.lowFps = 60;
		this.avgFps = 60;
		this._measureCount = 0;
		this._totalFps = 0;
		this._time = 0;
		this._ticks = 0;
		this._fpsMin = 60;
		this._fpsMax = 60;
		this._startTime = this._perfObj != null && this._perfObj.now != null ? this._perfObj.now() : new Date().getTime();
		this._prevTime = -Perf.MEASUREMENT_INTERVAL;
	}
	,_cancelRAF: function() {
		this.CAF.apply(window,[this._raf]);
		this._raf = null;
	}
	,__class__: Perf
};
var Reflect = function() { };
Reflect.__name__ = true;
Reflect.field = function(o,field) {
	try {
		return o[field];
	} catch( e ) {
		var e1 = ((e) instanceof js__$Boot_HaxeError) ? e.val : e;
		return null;
	}
};
var Settings = function() { };
Settings.__name__ = true;
Settings.getGameViewWidth = function() {
	return window.innerWidth;
};
Settings.getGameViewHeight = function() {
	return window.innerHeight;
};
Settings.getBackgroundColor = function() {
	return Settings.COLOR_BLACK;
};
var Std = function() { };
Std.__name__ = true;
Std.string = function(s) {
	return js_Boot.__string_rec(s,"");
};
var game_AnimationController = function(object) {
	this.object = object;
	this.states = [];
};
game_AnimationController.__name__ = true;
game_AnimationController.prototype = {
	setInitialState: function(state) {
		this.state = state;
		this.applyAnimation(state);
	}
	,setState: function(state) {
		if(this.state.name != state) {
			var _g = 0;
			var _g1 = this.states;
			while(_g < _g1.length) {
				var anim = _g1[_g];
				++_g;
				if(anim.name == state) {
					this.applyAnimation(anim);
					this.state = anim;
				}
			}
		}
	}
	,applyAnimation: function(animation) {
		this.object.animation = animation.animation;
		this.object.animation.animationSpeed = animation.speed;
		this.object.animation.playType = animation.playType;
		this.object.animation.setCurrentFrame(0);
	}
	,__class__: game_AnimationController
};
var animations_BoxAnimationController = function(box) {
	this.boxAnimation = new game_Animation(["assets/sprites/enviroment/box.png"]);
	game_AnimationController.call(this,box);
	this.boxState = new game_AnimationState("init",0,this.boxAnimation);
	this.states.push(this.boxState);
	this.setInitialState(this.boxState);
};
animations_BoxAnimationController.__name__ = true;
animations_BoxAnimationController.__super__ = game_AnimationController;
animations_BoxAnimationController.prototype = $extend(game_AnimationController.prototype,{
	__class__: animations_BoxAnimationController
});
var animations_BulletAnimationControler = function(bullet) {
	this.bulletAnimation = new game_Animation(["assets/sprites/bullets/bullet_0.png","assets/sprites/bullets/bullet_1.png"]);
	game_AnimationController.call(this,bullet);
	this.bulletAnimationState = new game_AnimationState("init",1,this.bulletAnimation,"once");
	this.states.push(this.bulletAnimationState);
	this.setInitialState(this.bulletAnimationState);
};
animations_BulletAnimationControler.__name__ = true;
animations_BulletAnimationControler.__super__ = game_AnimationController;
animations_BulletAnimationControler.prototype = $extend(game_AnimationController.prototype,{
	__class__: animations_BulletAnimationControler
});
var game_Animation = function(imgSource) {
	this.playType = "normal";
	this.animationSpeed = 1.0;
	this.currentFrame = 0;
	this.imaginaryFrame = 0.0;
	this.imgSource = imgSource;
	this.textures = [];
	this.convertImgToTexture();
	this.frames = this.textures.length;
};
game_Animation.__name__ = true;
game_Animation.prototype = {
	convertImgToTexture: function() {
		var _g = 0;
		var _g1 = this.imgSource;
		while(_g < _g1.length) {
			var img = _g1[_g];
			++_g;
			this.textures.push(PIXI.Texture.from(img));
		}
	}
	,getCurrentFrame: function() {
		return this.textures[this.currentFrame];
	}
	,setCurrentFrame: function(frame) {
		this.imaginaryFrame = frame;
		this.currentFrame = frame;
	}
	,updateAnimation: function() {
		if(this.playType == "normal") {
			if(this.animationSpeed != 0) {
				this.imaginaryFrame += this.animationSpeed;
				this.currentFrame = Math.floor(this.imaginaryFrame);
				if(this.currentFrame >= this.frames) {
					this.currentFrame = 0;
					this.imaginaryFrame = 0;
				}
			}
		} else if(this.playType == "once") {
			if(this.animationSpeed != 0) {
				if(this.currentFrame < this.frames - 1) {
					this.imaginaryFrame += this.animationSpeed;
					this.currentFrame = Math.floor(this.imaginaryFrame);
				}
			}
		}
		return this.textures[this.currentFrame];
	}
	,__class__: game_Animation
};
var animations_EnemyAnimationController = function(enemy) {
	game_AnimationController.call(this,enemy);
	this.enemyRun = new game_AnimationState("run",0.4,animations_EnemyAnimationController.enemyRunAnimation);
	this.enemyAttack = new game_AnimationState("attack",0.4,animations_EnemyAnimationController.enemyAttackAnimation);
	this.enemyGotDamage = new game_AnimationState("got_damage",0.0,animations_EnemyAnimationController.enemyGotDamageAnimation);
	this.states.push(this.enemyRun);
	this.states.push(this.enemyAttack);
	this.states.push(this.enemyGotDamage);
	this.setInitialState(this.enemyRun);
};
animations_EnemyAnimationController.__name__ = true;
animations_EnemyAnimationController.__super__ = game_AnimationController;
animations_EnemyAnimationController.prototype = $extend(game_AnimationController.prototype,{
	__class__: animations_EnemyAnimationController
});
var animations_PlayerAnimationController = function(player) {
	game_AnimationController.call(this,player);
	this.playerRun = new game_AnimationState("run",0.4,animations_PlayerAnimationController.playerRunAnimation);
	this.playerRoll = new game_AnimationState("roll",0.4,animations_PlayerAnimationController.playerRollAnimation);
	this.playerStay = new game_AnimationState("stay",0.0,animations_PlayerAnimationController.playerRunAnimation);
	this.states.push(this.playerRun);
	this.states.push(this.playerRoll);
	this.states.push(this.playerStay);
	this.setInitialState(this.playerStay);
};
animations_PlayerAnimationController.__name__ = true;
animations_PlayerAnimationController.__super__ = game_AnimationController;
animations_PlayerAnimationController.prototype = $extend(game_AnimationController.prototype,{
	__class__: animations_PlayerAnimationController
});
var animations_WeaponAnimationController = function(weapon) {
	this.tripleMachinegunAnimation = new game_Animation(["assets/sprites/weapons/triple_machinegun.png"]);
	this.shotgunAnimation = new game_Animation(["assets/sprites/weapons/shotgun.png"]);
	this.ppAnimation = new game_Animation(["assets/sprites/weapons/pp.png"]);
	this.pistolAnimation = new game_Animation(["assets/sprites/weapons/pistol.png"]);
	game_AnimationController.call(this,weapon);
	this.pistolState = new game_AnimationState(objects_weapon_WeaponStates.pistol,0.0,this.pistolAnimation);
	this.ppState = new game_AnimationState(objects_weapon_WeaponStates.pp,0.0,this.ppAnimation);
	this.shotgunState = new game_AnimationState(objects_weapon_WeaponStates.shotgun,0.0,this.shotgunAnimation);
	this.tripleMachinegunState = new game_AnimationState(objects_weapon_WeaponStates.tripleMachinegun,0.0,this.tripleMachinegunAnimation);
	this.states.push(this.pistolState);
	this.states.push(this.ppState);
	this.states.push(this.shotgunState);
	this.states.push(this.tripleMachinegunState);
	this.setInitialState(this.pistolState);
};
animations_WeaponAnimationController.__name__ = true;
animations_WeaponAnimationController.__super__ = game_AnimationController;
animations_WeaponAnimationController.prototype = $extend(game_AnimationController.prototype,{
	__class__: animations_WeaponAnimationController
});
var configs_InputTemplate = function() { };
configs_InputTemplate.__name__ = true;
var game_AnimationState = function(name,speed,animation,playType) {
	if(playType == null) {
		playType = "normal";
	}
	this.name = name;
	this.speed = speed;
	this.animation = animation;
	this.playType = playType;
};
game_AnimationState.__name__ = true;
game_AnimationState.prototype = {
	__class__: game_AnimationState
};
var game_CollisionController = function(gameObjStorage) {
	this.gameObjStorage = gameObjStorage;
};
game_CollisionController.__name__ = true;
game_CollisionController.prototype = {
	SimpleCollision: function(objA,objB) {
		if(((objA) instanceof game_GameObject) && ((objB) instanceof game_GameObject)) {
			return this.SimpleCollisionObjectObject(objA,objB);
		} else if(typeof(objA) == "string" && ((objB) instanceof game_GameObject) || ((objA) instanceof game_GameObject) && typeof(objB) == "string") {
			return this.SimpleCollisionObjectString(objA,objB);
		} else if(typeof(objA) == "string" && typeof(objB) == "string") {
			return this.SimpleCollisionStringString(objA,objB);
		} else {
			console.log("src/game/CollisionController.hx:21:","Expected values needs to be string or gameobject");
			return false;
		}
	}
	,SimpleCollisionObjectString: function(objA,objB) {
		var objects = this.gameObjStorage.getObjectStorage();
		var obj;
		var objType;
		if(((objA) instanceof game_GameObject)) {
			obj = objA;
			objType = objB;
		} else {
			obj = objB;
			objType = objA;
		}
		var _g_head = objects.h;
		while(_g_head != null) {
			var val = _g_head.item;
			_g_head = _g_head.next;
			var objX = val;
			if(objX.objectType == objType) {
				if(this.CalcSimpleCollision(objX,obj)) {
					return objX;
				}
			}
		}
		return false;
	}
	,SimpleCollisionObjectObject: function(objA,objB) {
		return this.CalcSimpleCollision(objA,objB);
	}
	,SimpleCollisionStringString: function(objA,objB) {
		var objects = this.gameObjStorage.getObjectStorage();
		var _g_head = objects.h;
		while(_g_head != null) {
			var val = _g_head.item;
			_g_head = _g_head.next;
			var objX = val;
			var _g_head1 = objects.h;
			while(_g_head1 != null) {
				var val1 = _g_head1.item;
				_g_head1 = _g_head1.next;
				var objY = val1;
				if(objX.objectType == objA && objY.objectType == objB) {
					if(this.CalcSimpleCollision(objX,objY)) {
						return true;
					}
				}
			}
		}
		return false;
	}
	,CalcSimpleCollision: function(objX,objY) {
		if(Math.abs(objX.x - objY.x) < 32.0) {
			if(Math.abs(objX.y - objY.y) < 32.0) {
				return true;
			}
		}
		return false;
	}
	,__class__: game_CollisionController
};
var game_EventExecutor = function(event,eventValue) {
	this.isPressing = false;
	var _gthis = this;
	this.event = event;
	this.eventValue = eventValue;
	this.compare = this.getCompareFunction(event);
	this.callbacks = [];
	if(event.indexOf("pressed") > -1) {
		var ev = event.split("pressed")[0];
		window.document.body.addEventListener(ev + "down",function(e) {
			_gthis.handlePressing(e,true);
			return;
		});
		window.document.body.addEventListener(ev + "up",function(e1) {
			_gthis.handlePressing(e1,false);
			return;
		});
	} else {
		window.document.body.addEventListener(event,function(e2) {
			_gthis.handleEvent(e2);
			return;
		});
	}
};
game_EventExecutor.__name__ = true;
game_EventExecutor.prototype = {
	update: function() {
		if(this.isPressing) {
			this.executeCallbacks();
		}
	}
	,handleEvent: function(e) {
		if(this.compare(e,this.eventValue)) {
			this.executeCallbacks();
		}
	}
	,handlePressing: function(e,val) {
		if(this.compare(e,this.eventValue)) {
			this.isPressing = val;
		}
	}
	,addCallback: function(callback) {
		this.callbacks.push(callback);
	}
	,executeCallbacks: function() {
		var _g = 0;
		var _g1 = this.callbacks;
		while(_g < _g1.length) {
			var callback = _g1[_g];
			++_g;
			callback();
		}
	}
	,getCompareFunction: function(event) {
		var compare;
		var keycodeCompare = function(e,eventValue) {
			return e.keyCode == eventValue;
		};
		var mouseClickCompare = function(e1,eventValue1) {
			return true;
		};
		if(event.indexOf("key") > -1) {
			compare = keycodeCompare;
		} else if(event.indexOf("mouse") > -1) {
			compare = mouseClickCompare;
		}
		return compare;
	}
	,__class__: game_EventExecutor
};
var game_Game = function(app) {
	game_Game.instance = this;
	this.app = app;
	this.inputController = new game_InputController();
	this.objStorage = new game_GameObjectStorage();
	this.collisionController = new game_CollisionController(this.objStorage);
	this.currenLevel = new levels_MainLevel();
};
game_Game.__name__ = true;
game_Game.getGame = function() {
	return game_Game.instance;
};
game_Game.prototype = {
	update: function(dt) {
		this.objStorage.updateGameObjects(dt);
		this.inputController.update();
	}
	,getApp: function() {
		return this.app;
	}
	,getInputController: function() {
		return this.inputController;
	}
	,getGameObjectStorage: function() {
		return this.objStorage;
	}
	,getCollisionController: function() {
		return this.collisionController;
	}
	,__class__: game_Game
};
var game_GameLevel = function() {
	this.initGameObjects();
};
game_GameLevel.__name__ = true;
game_GameLevel.prototype = {
	initGameObjects: function() {
	}
	,__class__: game_GameLevel
};
var game_GameObject = function(animationController) {
	this.objectType = "gameobject";
	this.animationController = animationController;
	this.collisionController = game_Game.getGame().getCollisionController();
	PIXI.Sprite.call(this,this.animation.getCurrentFrame());
	this.anchor.set(0.5);
	this.position.set(0,0);
	this.input = game_Game.getGame().getInputController();
	game_Game.getGame().getGameObjectStorage().saveGameObject(this);
	this.init();
	this.postInit();
};
game_GameObject.__name__ = true;
game_GameObject.__super__ = PIXI.Sprite;
game_GameObject.prototype = $extend(PIXI.Sprite.prototype,{
	init: function() {
	}
	,postInit: function() {
	}
	,update: function(dt) {
	}
	,secretUpdate: function(dt) {
		if(this.animation != null) {
			this.texture = this.animation.updateAnimation();
		}
	}
	,instanceDestroy: function() {
		game_Game.getGame().getGameObjectStorage().destroyGameObject(this);
		this.destroy();
	}
	,__class__: game_GameObject
});
var game_GameObjectStorage = function() {
	this.app = game_Game.getGame().getApp();
	this.storage = new haxe_ds_List();
};
game_GameObjectStorage.__name__ = true;
game_GameObjectStorage.prototype = {
	updateGameObjects: function(dt) {
		var _g_head = this.storage.h;
		while(_g_head != null) {
			var val = _g_head.item;
			_g_head = _g_head.next;
			var obj = val;
			obj.update(dt);
			obj.secretUpdate(dt);
		}
		this.updateLayering();
	}
	,updateLayering: function() {
		this.app.stage.children.sort(function(a,b) {
			return Math.round(a.y - b.y);
		});
	}
	,saveGameObject: function(obj) {
		this.storage.push(obj);
		this.app.stage.addChild(obj);
	}
	,destroyGameObject: function(obj) {
		this.storage.remove(obj);
	}
	,getObjectStorage: function() {
		return this.storage;
	}
	,__class__: game_GameObjectStorage
};
var game_InputController = function() {
	this.executors = new haxe_ds_StringMap();
	this.mousePosition = new utils_Vector();
	window.document.body.addEventListener("mousemove",$bind(this,this.setMousePosition));
};
game_InputController.__name__ = true;
game_InputController.prototype = {
	update: function() {
		var _this = this.executors;
		var executor = new haxe_ds__$StringMap_StringMapIterator(_this,_this.arrayKeys());
		while(executor.hasNext()) {
			var executor1 = executor.next();
			executor1.update();
		}
	}
	,setMousePosition: function(event) {
		this.mousePosition.x = event.pageX;
		this.mousePosition.y = event.pageY;
	}
	,getMousePosition: function() {
		return new utils_Vector(this.mousePosition.x,this.mousePosition.y);
	}
	,addEventCallback: function(event,eventValue,callback) {
		var mapKey = event + Std.string(eventValue);
		var _this = this.executors;
		if(__map_reserved[mapKey] != null ? _this.existsReserved(mapKey) : _this.h.hasOwnProperty(mapKey)) {
			var _this1 = this.executors;
			(__map_reserved[mapKey] != null ? _this1.getReserved(mapKey) : _this1.h[mapKey]).addCallback(callback);
		} else {
			var executor = new game_EventExecutor(event,eventValue);
			executor.addCallback(callback);
			var _this2 = this.executors;
			if(__map_reserved[mapKey] != null) {
				_this2.setReserved(mapKey,executor);
			} else {
				_this2.h[mapKey] = executor;
			}
		}
	}
	,onKeyDown: function(key,callback) {
		this.addEventCallback("keydown",key,callback);
	}
	,onKeyUp: function(key,callback) {
		this.addEventCallback("keyup",key,callback);
	}
	,onMouseDown: function(callback) {
		this.addEventCallback("mousedown",null,callback);
	}
	,onMousePressed: function(callback) {
		this.addEventCallback("mousepressed",null,callback);
	}
	,__class__: game_InputController
};
var haxe_IMap = function() { };
haxe_IMap.__name__ = true;
var haxe_Timer = function(time_ms) {
	var me = this;
	this.id = setInterval(function() {
		me.run();
	},time_ms);
};
haxe_Timer.__name__ = true;
haxe_Timer.delay = function(f,time_ms) {
	var t = new haxe_Timer(time_ms);
	t.run = function() {
		t.stop();
		f();
	};
	return t;
};
haxe_Timer.prototype = {
	stop: function() {
		if(this.id == null) {
			return;
		}
		clearInterval(this.id);
		this.id = null;
	}
	,run: function() {
	}
	,__class__: haxe_Timer
};
var haxe_ds_List = function() {
	this.length = 0;
};
haxe_ds_List.__name__ = true;
haxe_ds_List.prototype = {
	push: function(item) {
		var x = new haxe_ds__$List_ListNode(item,this.h);
		this.h = x;
		if(this.q == null) {
			this.q = x;
		}
		this.length++;
	}
	,remove: function(v) {
		var prev = null;
		var l = this.h;
		while(l != null) {
			if(l.item == v) {
				if(prev == null) {
					this.h = l.next;
				} else {
					prev.next = l.next;
				}
				if(this.q == l) {
					this.q = prev;
				}
				this.length--;
				return true;
			}
			prev = l;
			l = l.next;
		}
		return false;
	}
	,__class__: haxe_ds_List
};
var haxe_ds__$List_ListNode = function(item,next) {
	this.item = item;
	this.next = next;
};
haxe_ds__$List_ListNode.__name__ = true;
haxe_ds__$List_ListNode.prototype = {
	__class__: haxe_ds__$List_ListNode
};
var haxe_ds__$StringMap_StringMapIterator = function(map,keys) {
	this.map = map;
	this.keys = keys;
	this.index = 0;
	this.count = keys.length;
};
haxe_ds__$StringMap_StringMapIterator.__name__ = true;
haxe_ds__$StringMap_StringMapIterator.prototype = {
	hasNext: function() {
		return this.index < this.count;
	}
	,next: function() {
		var _this = this.map;
		var key = this.keys[this.index++];
		if(__map_reserved[key] != null) {
			return _this.getReserved(key);
		} else {
			return _this.h[key];
		}
	}
	,__class__: haxe_ds__$StringMap_StringMapIterator
};
var haxe_ds_StringMap = function() {
	this.h = { };
};
haxe_ds_StringMap.__name__ = true;
haxe_ds_StringMap.__interfaces__ = [haxe_IMap];
haxe_ds_StringMap.prototype = {
	setReserved: function(key,value) {
		if(this.rh == null) {
			this.rh = { };
		}
		this.rh["$" + key] = value;
	}
	,getReserved: function(key) {
		if(this.rh == null) {
			return null;
		} else {
			return this.rh["$" + key];
		}
	}
	,existsReserved: function(key) {
		if(this.rh == null) {
			return false;
		}
		return this.rh.hasOwnProperty("$" + key);
	}
	,keys: function() {
		return HxOverrides.iter(this.arrayKeys());
	}
	,arrayKeys: function() {
		var out = [];
		for( var key in this.h ) {
		if(this.h.hasOwnProperty(key)) {
			out.push(key);
		}
		}
		if(this.rh != null) {
			for( var key in this.rh ) {
			if(key.charCodeAt(0) == 36) {
				out.push(key.substr(1));
			}
			}
		}
		return out;
	}
	,__class__: haxe_ds_StringMap
};
var js__$Boot_HaxeError = function(val) {
	Error.call(this);
	this.val = val;
	if(Error.captureStackTrace) {
		Error.captureStackTrace(this,js__$Boot_HaxeError);
	}
};
js__$Boot_HaxeError.__name__ = true;
js__$Boot_HaxeError.__super__ = Error;
js__$Boot_HaxeError.prototype = $extend(Error.prototype,{
	__class__: js__$Boot_HaxeError
});
var js_Boot = function() { };
js_Boot.__name__ = true;
js_Boot.getClass = function(o) {
	if(((o) instanceof Array) && o.__enum__ == null) {
		return Array;
	} else {
		var cl = o.__class__;
		if(cl != null) {
			return cl;
		}
		var name = js_Boot.__nativeClassName(o);
		if(name != null) {
			return js_Boot.__resolveNativeClass(name);
		}
		return null;
	}
};
js_Boot.__string_rec = function(o,s) {
	if(o == null) {
		return "null";
	}
	if(s.length >= 5) {
		return "<...>";
	}
	var t = typeof(o);
	if(t == "function" && (o.__name__ || o.__ename__)) {
		t = "object";
	}
	switch(t) {
	case "function":
		return "<function>";
	case "object":
		if(o.__enum__) {
			var e = $hxEnums[o.__enum__];
			var n = e.__constructs__[o._hx_index];
			var con = e[n];
			if(con.__params__) {
				s += "\t";
				var tmp = n + "(";
				var _g = [];
				var _g1 = 0;
				var _g2 = con.__params__;
				while(_g1 < _g2.length) {
					var p = _g2[_g1];
					++_g1;
					_g.push(js_Boot.__string_rec(o[p],s));
				}
				return tmp + _g.join(",") + ")";
			} else {
				return n;
			}
		}
		if(((o) instanceof Array)) {
			var str = "[";
			s += "\t";
			var _g3 = 0;
			var _g11 = o.length;
			while(_g3 < _g11) {
				var i = _g3++;
				str += (i > 0 ? "," : "") + js_Boot.__string_rec(o[i],s);
			}
			str += "]";
			return str;
		}
		var tostr;
		try {
			tostr = o.toString;
		} catch( e1 ) {
			var e2 = ((e1) instanceof js__$Boot_HaxeError) ? e1.val : e1;
			return "???";
		}
		if(tostr != null && tostr != Object.toString && typeof(tostr) == "function") {
			var s2 = o.toString();
			if(s2 != "[object Object]") {
				return s2;
			}
		}
		var str1 = "{\n";
		s += "\t";
		var hasp = o.hasOwnProperty != null;
		var k = null;
		for( k in o ) {
		if(hasp && !o.hasOwnProperty(k)) {
			continue;
		}
		if(k == "prototype" || k == "__class__" || k == "__super__" || k == "__interfaces__" || k == "__properties__") {
			continue;
		}
		if(str1.length != 2) {
			str1 += ", \n";
		}
		str1 += s + k + " : " + js_Boot.__string_rec(o[k],s);
		}
		s = s.substring(1);
		str1 += "\n" + s + "}";
		return str1;
	case "string":
		return o;
	default:
		return String(o);
	}
};
js_Boot.__interfLoop = function(cc,cl) {
	if(cc == null) {
		return false;
	}
	if(cc == cl) {
		return true;
	}
	if(Object.prototype.hasOwnProperty.call(cc,"__interfaces__")) {
		var intf = cc.__interfaces__;
		var _g = 0;
		var _g1 = intf.length;
		while(_g < _g1) {
			var i = _g++;
			var i1 = intf[i];
			if(i1 == cl || js_Boot.__interfLoop(i1,cl)) {
				return true;
			}
		}
	}
	return js_Boot.__interfLoop(cc.__super__,cl);
};
js_Boot.__instanceof = function(o,cl) {
	if(cl == null) {
		return false;
	}
	switch(cl) {
	case Array:
		return ((o) instanceof Array);
	case Bool:
		return typeof(o) == "boolean";
	case Dynamic:
		return o != null;
	case Float:
		return typeof(o) == "number";
	case Int:
		if(typeof(o) == "number") {
			return ((o | 0) === o);
		} else {
			return false;
		}
		break;
	case String:
		return typeof(o) == "string";
	default:
		if(o != null) {
			if(typeof(cl) == "function") {
				if(((o) instanceof cl)) {
					return true;
				}
				if(js_Boot.__interfLoop(js_Boot.getClass(o),cl)) {
					return true;
				}
			} else if(typeof(cl) == "object" && js_Boot.__isNativeObj(cl)) {
				if(((o) instanceof cl)) {
					return true;
				}
			}
		} else {
			return false;
		}
		if(cl == Class ? o.__name__ != null : false) {
			return true;
		}
		if(cl == Enum ? o.__ename__ != null : false) {
			return true;
		}
		if(o.__enum__ != null) {
			return $hxEnums[o.__enum__] == cl;
		} else {
			return false;
		}
	}
};
js_Boot.__cast = function(o,t) {
	if(o == null || js_Boot.__instanceof(o,t)) {
		return o;
	} else {
		throw new js__$Boot_HaxeError("Cannot cast " + Std.string(o) + " to " + Std.string(t));
	}
};
js_Boot.__nativeClassName = function(o) {
	var name = js_Boot.__toStr.call(o).slice(8,-1);
	if(name == "Object" || name == "Function" || name == "Math" || name == "JSON") {
		return null;
	}
	return name;
};
js_Boot.__isNativeObj = function(o) {
	return js_Boot.__nativeClassName(o) != null;
};
js_Boot.__resolveNativeClass = function(name) {
	return $global[name];
};
var levels_MainLevel = function() {
	game_GameLevel.call(this);
};
levels_MainLevel.__name__ = true;
levels_MainLevel.__super__ = game_GameLevel;
levels_MainLevel.prototype = $extend(game_GameLevel.prototype,{
	initGameObjects: function() {
		var storage = game_Game.getGame().getGameObjectStorage();
		var player = new objects_player_Player();
		new objects_box_BoxController();
		new objects_enemy_EnemyFactory(player);
	}
	,__class__: levels_MainLevel
});
var objects_box_Box = function() {
	game_GameObject.call(this,new animations_BoxAnimationController(this));
	this.objectType = "box";
};
objects_box_Box.__name__ = true;
objects_box_Box.__super__ = game_GameObject;
objects_box_Box.prototype = $extend(game_GameObject.prototype,{
	respawn: function() {
		this.x = 800 * Math.random();
		this.y = 800 * Math.random();
	}
	,update: function(dt) {
		var playerCollision = this.collisionController.SimpleCollision(this,"player");
		if(playerCollision != false) {
			var player = js_Boot.__cast(playerCollision , objects_player_Player);
			player.setRandomGun();
			this.respawn();
		}
	}
	,__class__: objects_box_Box
});
var objects_box_BoxController = function() {
	this.currentBox = new objects_box_Box();
	this.currentBox.x = 200;
	this.currentBox.y = 200;
};
objects_box_BoxController.__name__ = true;
objects_box_BoxController.prototype = {
	__class__: objects_box_BoxController
};
var objects_bullet_Bullet = function(x,y,direction) {
	this.lifeTime = 300;
	this.moveSpd = 32 + Math.random() * 16;
	game_GameObject.call(this,new animations_BulletAnimationControler(this));
	this.x = x;
	this.y = y;
	this.direction = new utils_Vector(direction.x,direction.y);
	this.rotation = Math.atan2(direction.y,direction.x);
	new utils_Alarm(this.lifeTime,$bind(this,this.instanceDestroy));
};
objects_bullet_Bullet.__name__ = true;
objects_bullet_Bullet.__super__ = game_GameObject;
objects_bullet_Bullet.prototype = $extend(game_GameObject.prototype,{
	update: function(dt) {
		this.x += this.direction.x * this.moveSpd * dt;
		this.y += this.direction.y * this.moveSpd * dt;
	}
	,__class__: objects_bullet_Bullet
});
var objects_bullet_Shell = function(x,y,direction) {
	this.moveSpd = 48 + Math.random() * 16;
	game_GameObject.call(this,new animations_BulletAnimationControler(this));
	this.x = x;
	this.y = y;
	this.direction = new utils_Vector(direction.x,direction.y);
	this.rotation = Math.atan2(direction.y,direction.x);
};
objects_bullet_Shell.__name__ = true;
objects_bullet_Shell.__super__ = game_GameObject;
objects_bullet_Shell.prototype = $extend(game_GameObject.prototype,{
	update: function(dt) {
		this.x += this.direction.x * this.moveSpd * dt;
		this.y += this.direction.y * this.moveSpd * dt;
		this.moveSpd /= 1.1;
		this.scale.x /= 1.05;
		this.scale.y /= 1.05;
		if(this.moveSpd < 4) {
			this.instanceDestroy();
		}
	}
	,__class__: objects_bullet_Shell
});
var objects_enemy_Enemy = function(x,y,player) {
	this.diff = new utils_Vector();
	this.direction = new utils_Vector();
	game_GameObject.call(this,new animations_EnemyAnimationController(this));
	this.player = player;
	this.x = x;
	this.y = y;
	this.pos = new utils_Vector(x,y);
	this.moveSpeed = Math.random() * 4 + 4;
};
objects_enemy_Enemy.__name__ = true;
objects_enemy_Enemy.__super__ = game_GameObject;
objects_enemy_Enemy.prototype = $extend(game_GameObject.prototype,{
	update: function(dt) {
		this.diff = utils_Vector.calcDifference(new utils_Vector(this.x,this.y),new utils_Vector(this.player.x,this.player.y));
		utils_Vector.lerp(this.direction,this.diff,0.05);
		this.direction = utils_Vector.normalize(this.direction);
		this.x += this.direction.x * this.moveSpeed;
		this.y += this.direction.y * this.moveSpeed;
	}
	,__class__: objects_enemy_Enemy
});
var objects_enemy_EnemyFactory = function(player) {
	this.totalEnemies = 0;
	this.player = player;
	this.createSimpleEnemy();
};
objects_enemy_EnemyFactory.__name__ = true;
objects_enemy_EnemyFactory.prototype = {
	createSimpleEnemy: function() {
		if(this.totalEnemies < 20) {
			this.totalEnemies++;
			new objects_enemy_Enemy(50,50,this.player);
			new utils_Alarm(Math.round(Math.random() * 1000),$bind(this,this.createSimpleEnemy));
		}
	}
	,__class__: objects_enemy_EnemyFactory
};
var objects_player_Player = function() {
	this.isRolling = false;
	this.rollMultiplier = 2.5;
	this.moveSpeed = 8;
	this.MOVE_RIGHT = 0;
	this.MOVE_DOWN = 0;
	this.MOVE_LEFT = 0;
	this.MOVE_UP = 0;
	this.direction = new utils_Vector(1.0,0.0);
	this.idealMovement = new utils_Vector();
	this.realMovement = new utils_Vector();
	game_GameObject.call(this,new animations_PlayerAnimationController(this));
	this.view = new objects_player_PlayerView(this);
	this.position.set(500,500);
	this.objectType = "player";
	this.weapon = new objects_weapon_Weapon(this);
};
objects_player_Player.__name__ = true;
objects_player_Player.__super__ = game_GameObject;
objects_player_Player.prototype = $extend(game_GameObject.prototype,{
	init: function() {
		var _gthis = this;
		this.input.onKeyDown(configs_InputTemplate.KEY_MOVE_UP,function() {
			return _gthis.MOVE_UP = -1;
		});
		this.input.onKeyDown(configs_InputTemplate.KEY_MOVE_LEFT,function() {
			return _gthis.MOVE_LEFT = -1;
		});
		this.input.onKeyDown(configs_InputTemplate.KEY_MOVE_DOWN,function() {
			return _gthis.MOVE_DOWN = 1;
		});
		this.input.onKeyDown(configs_InputTemplate.KEY_MOVE_RIGHT,function() {
			return _gthis.MOVE_RIGHT = 1;
		});
		this.input.onKeyUp(configs_InputTemplate.KEY_MOVE_UP,function() {
			return _gthis.MOVE_UP = 0;
		});
		this.input.onKeyUp(configs_InputTemplate.KEY_MOVE_LEFT,function() {
			return _gthis.MOVE_LEFT = 0;
		});
		this.input.onKeyUp(configs_InputTemplate.KEY_MOVE_DOWN,function() {
			return _gthis.MOVE_DOWN = 0;
		});
		this.input.onKeyUp(configs_InputTemplate.KEY_MOVE_RIGHT,function() {
			return _gthis.MOVE_RIGHT = 0;
		});
		this.input.onKeyDown(configs_InputTemplate.KEY_ROLL,$bind(this,this.roll));
	}
	,update: function(dt) {
		if(!this.isRolling) {
			this.idealMovement.y = this.MOVE_UP + this.MOVE_DOWN;
			this.idealMovement.x = this.MOVE_LEFT + this.MOVE_RIGHT;
			utils_Vector.normalize(this.idealMovement);
			if(this.idealMovement.getLength() != 0) {
				this.direction.x = this.idealMovement.x;
				this.direction.y = this.idealMovement.y;
			}
			this.idealMovement.setLength(this.moveSpeed);
			utils_Vector.lerp(this.realMovement,this.idealMovement,1.25);
			this.y += this.realMovement.y * dt;
			this.x += this.realMovement.x * dt;
		} else {
			this.y += this.direction.y * this.moveSpeed * this.rollMultiplier * dt;
			this.x += this.direction.x * this.moveSpeed * this.rollMultiplier * dt;
		}
		this.view.update();
	}
	,roll: function() {
		var _gthis = this;
		if(!this.isRolling) {
			this.isRolling = true;
			new utils_Alarm(200,function() {
				return _gthis.isRolling = false;
			});
		}
	}
	,getMovementSpeed: function() {
		return this.realMovement.getLength();
	}
	,setRandomGun: function() {
		this.weapon.setRandomGun();
	}
	,__class__: objects_player_Player
});
var objects_player_PlayerView = function(player) {
	this.player = player;
};
objects_player_PlayerView.__name__ = true;
objects_player_PlayerView.prototype = {
	update: function() {
		if(!this.player.isRolling) {
			if(this.player.x > this.player.input.getMousePosition().x) {
				this.player.scale.x = -1;
			} else {
				this.player.scale.x = 1;
			}
			this.player.rotation = 0;
			if(this.player.getMovementSpeed() > 0.1) {
				this.player.animationController.setState("run");
			} else {
				this.player.animationController.setState("stay");
			}
		} else {
			this.player.animationController.setState("roll");
			this.player.rotation += 0.5;
		}
	}
	,__class__: objects_player_PlayerView
};
var objects_weapon_Weapon = function(player) {
	game_GameObject.call(this,new animations_WeaponAnimationController(this));
	this.player = player;
	this.view = new objects_weapon_WeaponView(this);
	this.stateController = new objects_weapon_WeaponStates(this);
	this.setState(objects_weapon_WeaponStates.pistol);
	this.input.onMouseDown($bind(this,this.manualShoot));
	this.input.onMousePressed($bind(this,this.autoShoot));
};
objects_weapon_Weapon.__name__ = true;
objects_weapon_Weapon.__super__ = game_GameObject;
objects_weapon_Weapon.prototype = $extend(game_GameObject.prototype,{
	setState: function(state) {
		this.stateController.setState(state);
		this.animationController.setState(state);
	}
	,update: function(dt) {
		this.x = this.player.x;
		this.y = this.player.y;
		this.view.update();
	}
	,autoShoot: function() {
		if(this.stateController.getGun().auto) {
			this.shoot();
		}
	}
	,manualShoot: function() {
		if(!this.stateController.getGun().auto) {
			this.shoot();
		}
	}
	,shoot: function() {
		var direction = this.calcDirectionToMouse();
		this.stateController.getGun().fire(direction);
		this.view.shoot();
	}
	,calcDirectionToMouse: function() {
		var mouse = this.input.getMousePosition();
		var position = new utils_Vector(this.x,this.y);
		var direction = utils_Vector.calcDifference(position,mouse);
		return utils_Vector.normalize(direction);
	}
	,setRandomGun: function() {
		this.stateController.setRandomGun();
	}
	,__class__: objects_weapon_Weapon
});
var objects_weapon_WeaponStates = function(weapon) {
	this.weapon = weapon;
	this.gunMap = new haxe_ds_StringMap();
	var this1 = this.gunMap;
	var k = objects_weapon_WeaponStates.pistol;
	var v = new objects_weapon_guns_Pistol(weapon);
	var _this = this1;
	if(__map_reserved[k] != null) {
		_this.setReserved(k,v);
	} else {
		_this.h[k] = v;
	}
	var this11 = this.gunMap;
	var k1 = objects_weapon_WeaponStates.pp;
	var v1 = new objects_weapon_guns_Pp(weapon);
	var _this1 = this11;
	if(__map_reserved[k1] != null) {
		_this1.setReserved(k1,v1);
	} else {
		_this1.h[k1] = v1;
	}
	var this12 = this.gunMap;
	var k2 = objects_weapon_WeaponStates.shotgun;
	var v2 = new objects_weapon_guns_Shotgun(weapon);
	var _this2 = this12;
	if(__map_reserved[k2] != null) {
		_this2.setReserved(k2,v2);
	} else {
		_this2.h[k2] = v2;
	}
};
objects_weapon_WeaponStates.__name__ = true;
objects_weapon_WeaponStates.prototype = {
	setState: function(state) {
		this.currentState = state;
	}
	,getGun: function() {
		var key = this.currentState;
		var _this = this.gunMap;
		if(__map_reserved[key] != null) {
			return _this.getReserved(key);
		} else {
			return _this.h[key];
		}
	}
	,setRandomGun: function() {
		var gunsRotation = true;
		while(gunsRotation) {
			var gun = this.gunMap.keys();
			while(gun.hasNext()) {
				var gun1 = gun.next();
				if(gun1 != this.currentState && gun1 != objects_weapon_WeaponStates.pistol) {
					if(Math.random() > 0.5) {
						gunsRotation = false;
						this.weapon.setState(gun1);
					}
				}
			}
		}
	}
	,__class__: objects_weapon_WeaponStates
};
var objects_weapon_WeaponView = function(weapon) {
	this.NORMAL_ANCHOR_Y = 0.5;
	this.NORMAL_ANCHOR_X = -0.5;
	this.anchorDelta = 0.0;
	this.weapon = weapon;
	weapon.anchor.set(this.NORMAL_ANCHOR_X,this.NORMAL_ANCHOR_Y);
};
objects_weapon_WeaponView.__name__ = true;
objects_weapon_WeaponView.prototype = {
	update: function() {
		var mouse = this.weapon.input.getMousePosition();
		var direction = new utils_Vector(this.weapon.x,this.weapon.y);
		var dir = utils_Vector.calcDifference(direction,mouse);
		dir = utils_Vector.normalize(dir);
		this.weapon.rotation = Math.atan2(dir.y,dir.x);
		if(this.weapon.x > this.weapon.input.getMousePosition().x) {
			this.weapon.scale.y = -1;
		} else {
			this.weapon.scale.y = 1;
		}
		if(this.anchorDelta != 0) {
			this.anchorDelta /= 1.25;
			this.weapon.anchor.set(this.NORMAL_ANCHOR_X + this.anchorDelta,this.NORMAL_ANCHOR_Y);
		}
	}
	,shoot: function() {
		this.anchorDelta = 0.5;
	}
	,__class__: objects_weapon_WeaponView
};
var objects_weapon_guns_AbstractGun = function(weapon) {
	this.canShoot = true;
	this.weapon = weapon;
	this.init();
};
objects_weapon_guns_AbstractGun.__name__ = true;
objects_weapon_guns_AbstractGun.prototype = {
	init: function() {
	}
	,fire: function(direction) {
		var _gthis = this;
		if(this.canShoot) {
			this.fireCallback(direction);
			this.canShoot = false;
			new utils_Alarm(this.fireRate,function() {
				return _gthis.canShoot = true;
			});
		}
	}
	,makeRangedDirection: function(direction) {
		var angle = Math.random() * this.range * 2 - this.range;
		direction.addAngle(angle);
	}
	,calcOffsetPosition: function(direction) {
		return new utils_Vector(this.weapon.x + this.positionOffset * direction.x,this.weapon.y + this.positionOffset * direction.y);
	}
	,__class__: objects_weapon_guns_AbstractGun
};
var objects_weapon_guns_Pistol = function(weapon) {
	objects_weapon_guns_AbstractGun.call(this,weapon);
};
objects_weapon_guns_Pistol.__name__ = true;
objects_weapon_guns_Pistol.__super__ = objects_weapon_guns_AbstractGun;
objects_weapon_guns_Pistol.prototype = $extend(objects_weapon_guns_AbstractGun.prototype,{
	init: function() {
		var _gthis = this;
		this.fireRate = 100;
		this.auto = false;
		this.range = 5;
		this.positionOffset = 32;
		this.fireCallback = function(direction) {
			_gthis.makeRangedDirection(direction);
			var position = _gthis.calcOffsetPosition(direction);
			new objects_bullet_Bullet(position.x,position.y,direction);
		};
	}
	,__class__: objects_weapon_guns_Pistol
});
var objects_weapon_guns_Pp = function(weapon) {
	objects_weapon_guns_AbstractGun.call(this,weapon);
};
objects_weapon_guns_Pp.__name__ = true;
objects_weapon_guns_Pp.__super__ = objects_weapon_guns_AbstractGun;
objects_weapon_guns_Pp.prototype = $extend(objects_weapon_guns_AbstractGun.prototype,{
	init: function() {
		var _gthis = this;
		this.fireRate = 20;
		this.auto = true;
		this.range = 10;
		this.positionOffset = 32;
		this.fireCallback = function(direction) {
			_gthis.makeRangedDirection(direction);
			var position = _gthis.calcOffsetPosition(direction);
			new objects_bullet_Bullet(position.x,position.y,direction);
		};
	}
	,__class__: objects_weapon_guns_Pp
});
var objects_weapon_guns_Shotgun = function(weapon) {
	objects_weapon_guns_AbstractGun.call(this,weapon);
};
objects_weapon_guns_Shotgun.__name__ = true;
objects_weapon_guns_Shotgun.__super__ = objects_weapon_guns_AbstractGun;
objects_weapon_guns_Shotgun.prototype = $extend(objects_weapon_guns_AbstractGun.prototype,{
	init: function() {
		var _gthis = this;
		this.fireRate = 200;
		this.auto = false;
		this.range = 10;
		this.positionOffset = 32;
		this.fireCallback = function(direction) {
			_gthis.makeRangedDirection(direction);
			var position = _gthis.calcOffsetPosition(direction);
			new objects_bullet_Shell(position.x,position.y,direction);
			_gthis.makeRangedDirection(direction);
			var position1 = _gthis.calcOffsetPosition(direction);
			new objects_bullet_Shell(position1.x,position1.y,direction);
			_gthis.makeRangedDirection(direction);
			var position2 = _gthis.calcOffsetPosition(direction);
			new objects_bullet_Shell(position2.x,position2.y,direction);
			_gthis.makeRangedDirection(direction);
			var position3 = _gthis.calcOffsetPosition(direction);
			new objects_bullet_Shell(position3.x,position3.y,direction);
			_gthis.makeRangedDirection(direction);
			var position4 = _gthis.calcOffsetPosition(direction);
			new objects_bullet_Shell(position4.x,position4.y,direction);
			_gthis.makeRangedDirection(direction);
			var position5 = _gthis.calcOffsetPosition(direction);
			new objects_bullet_Shell(position5.x,position5.y,direction);
			_gthis.makeRangedDirection(direction);
			var position6 = _gthis.calcOffsetPosition(direction);
			new objects_bullet_Shell(position6.x,position6.y,direction);
			_gthis.makeRangedDirection(direction);
			var position7 = _gthis.calcOffsetPosition(direction);
			new objects_bullet_Shell(position7.x,position7.y,direction);
		};
	}
	,__class__: objects_weapon_guns_Shotgun
});
var utils_Alarm = function(duration,callback) {
	var _gthis = this;
	this.timer = haxe_Timer.delay(function() {
		callback();
		_gthis.timer.stop();
	},duration);
};
utils_Alarm.__name__ = true;
utils_Alarm.prototype = {
	__class__: utils_Alarm
};
var utils_Vector = function(x,y) {
	if(y == null) {
		y = 0;
	}
	if(x == null) {
		x = 0;
	}
	this.x = x;
	this.y = y;
};
utils_Vector.__name__ = true;
utils_Vector.normalize = function(vector) {
	var length = utils_Vector.calcLength(vector.x,vector.y);
	if(length != 0) {
		vector.x /= length;
		vector.y /= length;
	}
	return vector;
};
utils_Vector.calcLength = function(x,y) {
	return Math.sqrt(x * x + y * y);
};
utils_Vector.calcDifference = function(from,to) {
	var diffVector = new utils_Vector(0,0);
	diffVector.x = to.x - from.x;
	diffVector.y = to.y - from.y;
	return diffVector;
};
utils_Vector.lerp = function(from,to,deltaSpeed) {
	if(deltaSpeed == null) {
		deltaSpeed = 1;
	}
	var diffVector = utils_Vector.calcDifference(from,to);
	if(utils_Vector.calcLength(diffVector.x,diffVector.y) > deltaSpeed) {
		utils_Vector.normalize(diffVector).setLength(deltaSpeed);
	}
	from.x += diffVector.x;
	from.y += diffVector.y;
};
utils_Vector.prototype = {
	getLength: function() {
		return utils_Vector.calcLength(this.x,this.y);
	}
	,setLength: function(length) {
		this.x *= length;
		this.y *= length;
	}
	,getAngle: function() {
		var angle = Math.atan2(this.y,this.x) * 180 / Math.PI;
		if(angle > 0) {
			angle -= 360;
		}
		angle = -angle;
		return angle;
	}
	,setAngle: function(angle) {
		angle = (90 + angle) / 180 * Math.PI;
		this.x = Math.sin(angle);
		this.y = Math.cos(angle);
	}
	,addAngle: function(deltaAngle) {
		var angle = this.getAngle() + deltaAngle;
		this.setAngle(angle);
	}
	,__class__: utils_Vector
};
var $_;
function $bind(o,m) { if( m == null ) return null; if( m.__id__ == null ) m.__id__ = $global.$haxeUID++; var f; if( o.hx__closures__ == null ) o.hx__closures__ = {}; else f = o.hx__closures__[m.__id__]; if( f == null ) { f = m.bind(o); o.hx__closures__[m.__id__] = f; } return f; }
if(typeof $global.$haxeUID == "undefined") $global.$haxeUID = 0;
String.prototype.__class__ = String;
String.__name__ = true;
Array.__name__ = true;
Date.prototype.__class__ = Date;
Date.__name__ = "Date";
var Int = { };
var Dynamic = { };
var Float = Number;
var Bool = Boolean;
var Class = { };
var Enum = { };
var __map_reserved = {};
Object.defineProperty(js__$Boot_HaxeError.prototype,"message",{ get : function() {
	return String(this.val);
}});
js_Boot.__toStr = ({ }).toString;
Perf.MEASUREMENT_INTERVAL = 1000;
Perf.FONT_FAMILY = "Helvetica,Arial";
Perf.FPS_BG_CLR = "#00FF00";
Perf.FPS_WARN_BG_CLR = "#FF8000";
Perf.FPS_PROB_BG_CLR = "#FF0000";
Perf.MS_BG_CLR = "#FFFF00";
Perf.MEM_BG_CLR = "#086A87";
Perf.INFO_BG_CLR = "#00FFFF";
Perf.FPS_TXT_CLR = "#000000";
Perf.MS_TXT_CLR = "#000000";
Perf.MEM_TXT_CLR = "#FFFFFF";
Perf.INFO_TXT_CLR = "#000000";
Perf.TOP_LEFT = "TL";
Perf.TOP_RIGHT = "TR";
Perf.BOTTOM_LEFT = "BL";
Perf.BOTTOM_RIGHT = "BR";
Perf.DELAY_TIME = 4000;
Settings.COLOR_BLACK = 10961195;
animations_EnemyAnimationController.enemyRunAnimation = new game_Animation(["assets/sprites/enemies/skeleton_hit.png"]);
animations_EnemyAnimationController.enemyAttackAnimation = new game_Animation(["assets/sprites/enemies/skeleton_hit.png"]);
animations_EnemyAnimationController.enemyGotDamageAnimation = new game_Animation(["assets/sprites/enemies/skeleton_hit.png"]);
animations_PlayerAnimationController.playerRunAnimation = new game_Animation(["assets/sprites/player/player_run_0.png","assets/sprites/player/player_run_1.png","assets/sprites/player/player_run_2.png","assets/sprites/player/player_run_3.png"]);
animations_PlayerAnimationController.playerRollAnimation = new game_Animation(["assets/sprites/player/player_roll.png"]);
configs_InputTemplate.KEY_MOVE_UP = 87;
configs_InputTemplate.KEY_MOVE_DOWN = 83;
configs_InputTemplate.KEY_MOVE_LEFT = 65;
configs_InputTemplate.KEY_MOVE_RIGHT = 68;
configs_InputTemplate.KEY_ROLL = 32;
objects_weapon_WeaponStates.pistol = "pistol";
objects_weapon_WeaponStates.pp = "pp";
objects_weapon_WeaponStates.shotgun = "shotgun";
objects_weapon_WeaponStates.tripleMachinegun = "triple_machinegun";
Main.main();
})(typeof exports != "undefined" ? exports : typeof window != "undefined" ? window : typeof self != "undefined" ? self : this, typeof window != "undefined" ? window : typeof global != "undefined" ? global : typeof self != "undefined" ? self : this);

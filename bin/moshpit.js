// Generated by Haxe 4.0.0-rc.3+e3df7a448
(function ($hx_exports, $global) { "use strict";
function $extend(from, fields) {
	var proto = Object.create(from);
	for (var name in fields) proto[name] = fields[name];
	if( fields.toString !== Object.prototype.toString ) proto.toString = fields.toString;
	return proto;
}
var pixi_plugins_app_Application = function() {
	this._animationFrameId = null;
	this.pixelRatio = 1;
	this.autoResize = true;
	this.transparent = false;
	this.antialias = false;
	this.forceFXAA = false;
	this.roundPixels = false;
	this.legacy = false;
	this.clearBeforeRender = true;
	this.preserveDrawingBuffer = false;
	this.backgroundColor = 16777215;
	this.width = window.innerWidth;
	this.height = window.innerHeight;
	this.position = "static";
};
pixi_plugins_app_Application.prototype = {
	start: function(rendererType,parentDom,canvasElement) {
		if(rendererType == null) {
			rendererType = "auto";
		}
		if(canvasElement == null) {
			this.canvas = window.document.createElement("canvas");
			this.canvas.style.width = this.width + "px";
			this.canvas.style.height = this.height + "px";
			this.canvas.style.position = this.position;
		} else {
			this.canvas = canvasElement;
		}
		if(this.autoResize) {
			window.onresize = $bind(this,this._onWindowResize);
		}
		var renderingOptions = { };
		renderingOptions.width = this.width | 0;
		renderingOptions.height = this.height | 0;
		renderingOptions.view = this.canvas;
		renderingOptions.backgroundColor = this.backgroundColor;
		renderingOptions.resolution = this.pixelRatio;
		renderingOptions.antialias = this.antialias;
		renderingOptions.forceFXAA = this.forceFXAA;
		renderingOptions.autoResize = this.autoResize;
		renderingOptions.transparent = this.transparent;
		renderingOptions.clearBeforeRender = this.clearBeforeRender;
		renderingOptions.preserveDrawingBuffer = this.preserveDrawingBuffer;
		renderingOptions.roundPixels = this.roundPixels;
		renderingOptions.legacy = this.legacy;
		if(rendererType == null) {
			this.app = new PIXI.Application(renderingOptions);
		} else if(rendererType == "canvas") {
			renderingOptions.forceCanvas = true;
			this.app = new PIXI.Application(renderingOptions);
		} else {
			this.app = new PIXI.Application(renderingOptions);
		}
		this.stage = this.app.stage;
		this.renderer = this.app.renderer;
		if(parentDom == null) {
			window.document.body.appendChild(this.app.view);
		} else {
			parentDom.appendChild(this.app.view);
		}
		this.app.ticker.add($bind(this,this._onRequestAnimationFrame));
	}
	,_onWindowResize: function(event) {
		this.width = window.innerWidth;
		this.height = window.innerHeight;
		this.app.renderer.resize(this.width,this.height);
		this.canvas.style.width = this.width + "px";
		this.canvas.style.height = this.height + "px";
		if(this.onResize != null) {
			this.onResize();
		}
	}
	,_onRequestAnimationFrame: function() {
		if(this.onUpdate != null) {
			this.onUpdate(this.app.ticker.deltaTime);
		}
	}
};
var AppController = function() {
	pixi_plugins_app_Application.call(this);
	this.applySettings();
	pixi_plugins_app_Application.prototype.start.call(this);
	var game1 = new game_Game(this);
	this.onUpdate = $bind(game1,game1.update);
};
AppController.__super__ = pixi_plugins_app_Application;
AppController.prototype = $extend(pixi_plugins_app_Application.prototype,{
	applySettings: function() {
		this.position = "fixed";
		this.width = Settings.getGameViewWidth();
		this.height = Settings.getGameViewHeight();
		this.backgroundColor = Settings.getBackgroundColor();
		this.transparent = false;
		this.antialias = false;
	}
});
var Main = function() { };
Main.main = function() {
	new AppController();
};
var Perf = $hx_exports["Perf"] = function(pos,offset) {
	if(offset == null) {
		offset = 0;
	}
	if(pos == null) {
		pos = "TR";
	}
	this._perfObj = window.performance;
	if(Reflect.field(this._perfObj,"memory") != null) {
		this._memoryObj = Reflect.field(this._perfObj,"memory");
	}
	this._memCheck = this._perfObj != null && this._memoryObj != null && this._memoryObj.totalJSHeapSize > 0;
	this._pos = pos;
	this._offset = offset;
	this.currentFps = 60;
	this.currentMs = 0;
	this.currentMem = "0";
	this.lowFps = 60;
	this.avgFps = 60;
	this._measureCount = 0;
	this._totalFps = 0;
	this._time = 0;
	this._ticks = 0;
	this._fpsMin = 60;
	this._fpsMax = 60;
	this._startTime = this._perfObj != null && this._perfObj.now != null ? this._perfObj.now() : new Date().getTime();
	this._prevTime = -Perf.MEASUREMENT_INTERVAL;
	this._createFpsDom();
	this._createMsDom();
	if(this._memCheck) {
		this._createMemoryDom();
	}
	if(window.requestAnimationFrame != null) {
		this.RAF = ($_=window,$bind($_,$_.requestAnimationFrame));
	} else if(window.mozRequestAnimationFrame != null) {
		this.RAF = window.mozRequestAnimationFrame;
	} else if(window.webkitRequestAnimationFrame != null) {
		this.RAF = window.webkitRequestAnimationFrame;
	} else if(window.msRequestAnimationFrame != null) {
		this.RAF = window.msRequestAnimationFrame;
	}
	if(window.cancelAnimationFrame != null) {
		this.CAF = ($_=window,$bind($_,$_.cancelAnimationFrame));
	} else if(window.mozCancelAnimationFrame != null) {
		this.CAF = window.mozCancelAnimationFrame;
	} else if(window.webkitCancelAnimationFrame != null) {
		this.CAF = window.webkitCancelAnimationFrame;
	} else if(window.msCancelAnimationFrame != null) {
		this.CAF = window.msCancelAnimationFrame;
	}
	if(this.RAF != null) {
		this._raf = this.RAF.apply(window,[$bind(this,this._tick)]);
	}
};
Perf.prototype = {
	_init: function() {
		this.currentFps = 60;
		this.currentMs = 0;
		this.currentMem = "0";
		this.lowFps = 60;
		this.avgFps = 60;
		this._measureCount = 0;
		this._totalFps = 0;
		this._time = 0;
		this._ticks = 0;
		this._fpsMin = 60;
		this._fpsMax = 60;
		this._startTime = this._perfObj != null && this._perfObj.now != null ? this._perfObj.now() : new Date().getTime();
		this._prevTime = -Perf.MEASUREMENT_INTERVAL;
	}
	,_now: function() {
		if(this._perfObj != null && this._perfObj.now != null) {
			return this._perfObj.now();
		} else {
			return new Date().getTime();
		}
	}
	,_tick: function(val) {
		var time = this._perfObj != null && this._perfObj.now != null ? this._perfObj.now() : new Date().getTime();
		this._ticks++;
		if(this._raf != null && time > this._prevTime + Perf.MEASUREMENT_INTERVAL) {
			this.currentMs = Math.round(time - this._startTime);
			this.ms.innerHTML = "MS: " + this.currentMs;
			this.currentFps = Math.round(this._ticks * 1000 / (time - this._prevTime));
			if(this.currentFps > 0 && val > Perf.DELAY_TIME) {
				this._measureCount++;
				this._totalFps += this.currentFps;
				this.lowFps = this._fpsMin = Math.min(this._fpsMin,this.currentFps);
				this._fpsMax = Math.max(this._fpsMax,this.currentFps);
				this.avgFps = Math.round(this._totalFps / this._measureCount);
			}
			this.fps.innerHTML = "FPS: " + this.currentFps + " (" + this._fpsMin + "-" + this._fpsMax + ")";
			if(this.currentFps >= 30) {
				this.fps.style.backgroundColor = Perf.FPS_BG_CLR;
			} else if(this.currentFps >= 15) {
				this.fps.style.backgroundColor = Perf.FPS_WARN_BG_CLR;
			} else {
				this.fps.style.backgroundColor = Perf.FPS_PROB_BG_CLR;
			}
			this._prevTime = time;
			this._ticks = 0;
			if(this._memCheck) {
				this.currentMem = this._getFormattedSize(this._memoryObj.usedJSHeapSize,2);
				this.memory.innerHTML = "MEM: " + this.currentMem;
			}
		}
		this._startTime = time;
		if(this._raf != null) {
			this._raf = this.RAF.apply(window,[$bind(this,this._tick)]);
		}
	}
	,_createDiv: function(id,top) {
		if(top == null) {
			top = 0;
		}
		var div = window.document.createElement("div");
		div.id = id;
		div.className = id;
		div.style.position = "absolute";
		switch(this._pos) {
		case "BL":
			div.style.left = this._offset + "px";
			div.style.bottom = (this._memCheck ? 48 : 32) - top + "px";
			break;
		case "BR":
			div.style.right = this._offset + "px";
			div.style.bottom = (this._memCheck ? 48 : 32) - top + "px";
			break;
		case "TL":
			div.style.left = this._offset + "px";
			div.style.top = top + "px";
			break;
		case "TR":
			div.style.right = this._offset + "px";
			div.style.top = top + "px";
			break;
		}
		div.style.width = "80px";
		div.style.height = "12px";
		div.style.lineHeight = "12px";
		div.style.padding = "2px";
		div.style.fontFamily = Perf.FONT_FAMILY;
		div.style.fontSize = "9px";
		div.style.fontWeight = "bold";
		div.style.textAlign = "center";
		window.document.body.appendChild(div);
		return div;
	}
	,_createFpsDom: function() {
		this.fps = this._createDiv("fps");
		this.fps.style.backgroundColor = Perf.FPS_BG_CLR;
		this.fps.style.zIndex = "995";
		this.fps.style.color = Perf.FPS_TXT_CLR;
		this.fps.innerHTML = "FPS: 0";
	}
	,_createMsDom: function() {
		this.ms = this._createDiv("ms",16);
		this.ms.style.backgroundColor = Perf.MS_BG_CLR;
		this.ms.style.zIndex = "996";
		this.ms.style.color = Perf.MS_TXT_CLR;
		this.ms.innerHTML = "MS: 0";
	}
	,_createMemoryDom: function() {
		this.memory = this._createDiv("memory",32);
		this.memory.style.backgroundColor = Perf.MEM_BG_CLR;
		this.memory.style.color = Perf.MEM_TXT_CLR;
		this.memory.style.zIndex = "997";
		this.memory.innerHTML = "MEM: 0";
	}
	,_getFormattedSize: function(bytes,frac) {
		if(frac == null) {
			frac = 0;
		}
		var sizes = ["Bytes","KB","MB","GB","TB"];
		if(bytes == 0) {
			return "0";
		}
		var precision = Math.pow(10,frac);
		var i = Math.floor(Math.log(bytes) / Math.log(1024));
		return Math.round(bytes * precision / Math.pow(1024,i)) / precision + " " + sizes[i];
	}
	,addInfo: function(val) {
		this.info = this._createDiv("info",this._memCheck ? 48 : 32);
		this.info.style.backgroundColor = Perf.INFO_BG_CLR;
		this.info.style.color = Perf.INFO_TXT_CLR;
		this.info.style.zIndex = "998";
		this.info.innerHTML = val;
	}
	,clearInfo: function() {
		if(this.info != null) {
			window.document.body.removeChild(this.info);
			this.info = null;
		}
	}
	,destroy: function() {
		this.CAF.apply(window,[this._raf]);
		this._raf = null;
		this._perfObj = null;
		this._memoryObj = null;
		if(this.fps != null) {
			window.document.body.removeChild(this.fps);
			this.fps = null;
		}
		if(this.ms != null) {
			window.document.body.removeChild(this.ms);
			this.ms = null;
		}
		if(this.memory != null) {
			window.document.body.removeChild(this.memory);
			this.memory = null;
		}
		this.clearInfo();
		this.currentFps = 60;
		this.currentMs = 0;
		this.currentMem = "0";
		this.lowFps = 60;
		this.avgFps = 60;
		this._measureCount = 0;
		this._totalFps = 0;
		this._time = 0;
		this._ticks = 0;
		this._fpsMin = 60;
		this._fpsMax = 60;
		this._startTime = this._perfObj != null && this._perfObj.now != null ? this._perfObj.now() : new Date().getTime();
		this._prevTime = -Perf.MEASUREMENT_INTERVAL;
	}
	,_cancelRAF: function() {
		this.CAF.apply(window,[this._raf]);
		this._raf = null;
	}
};
var Reflect = function() { };
Reflect.field = function(o,field) {
	try {
		return o[field];
	} catch( e ) {
		var e1 = ((e) instanceof js__$Boot_HaxeError) ? e.val : e;
		return null;
	}
};
var Settings = function() { };
Settings.getGameViewWidth = function() {
	return window.innerWidth;
};
Settings.getGameViewHeight = function() {
	return window.innerHeight;
};
Settings.getBackgroundColor = function() {
	return Settings.COLOR_BLACK;
};
var Type = function() { };
Type.createInstance = function(cl,args) {
	return new (Function.prototype.bind.apply(cl,[null].concat(args)));
};
var game_Game = function(app) {
	game_Game.instance = this;
	this.app = app;
	this.inputController = new game_InputController();
	this.objStorage = new game_GameObjectStorage();
	this.currenLevel = new levels_MainLevel();
};
game_Game.getGame = function() {
	return game_Game.instance;
};
game_Game.prototype = {
	update: function(dt) {
		this.objStorage.updateGameObjects(dt);
	}
	,getApp: function() {
		return this.app;
	}
	,getInputController: function() {
		return this.inputController;
	}
	,getGameObjectStorage: function() {
		return this.objStorage;
	}
};
var game_GameLevel = function() {
	this.initGameObjects();
};
game_GameLevel.prototype = {
	initGameObjects: function() {
	}
};
var game_GameObject = function(spriteUrl) {
	PIXI.Sprite.call(this,PIXI.Texture.from(spriteUrl));
	this.anchor.set(0.5);
	this.position.set(0,0);
	this.input = game_Game.getGame().getInputController();
	this.init();
};
game_GameObject.__super__ = PIXI.Sprite;
game_GameObject.prototype = $extend(PIXI.Sprite.prototype,{
	init: function() {
	}
	,update: function(dt) {
	}
});
var game_GameObjectStorage = function() {
	this.app = game_Game.getGame().getApp();
	this.storage = new haxe_ds_List();
};
game_GameObjectStorage.prototype = {
	updateGameObjects: function(dt) {
		var _g_head = this.storage.h;
		while(_g_head != null) {
			var val = _g_head.item;
			_g_head = _g_head.next;
			var obj = val;
			obj.update(dt);
		}
	}
	,createGameObject: function(objClass) {
		var obj = Type.createInstance(objClass,null);
		this.storage.push(obj);
		this.app.stage.addChild(obj);
		return obj;
	}
};
var game_InputController = function() {
	this.listeners = new haxe_ds_StringMap();
	this.mousePosition = new utils_Vector();
};
game_InputController.prototype = {
	addInputCallback: function(event,key,callback) {
		var mapKey = event + key;
		var _this = this.listeners;
		if(__map_reserved[mapKey] != null ? _this.existsReserved(mapKey) : _this.h.hasOwnProperty(mapKey)) {
			var _this1 = this.listeners;
			(__map_reserved[mapKey] != null ? _this1.getReserved(mapKey) : _this1.h[mapKey]).addCallback(callback);
		} else {
			var listener = new game_InputListener(event,key);
			listener.addCallback(callback);
			var _this2 = this.listeners;
			if(__map_reserved[mapKey] != null) {
				_this2.setReserved(mapKey,listener);
			} else {
				_this2.h[mapKey] = listener;
			}
		}
	}
	,onKeyDown: function(key,callback) {
		this.addInputCallback("keydown",key,callback);
	}
	,onKeyUp: function(key,callback) {
		this.addInputCallback("keyup",key,callback);
	}
	,onKeyPressed: function(key,callbackDown,callbackUp) {
		this.onKeyDown(key,callbackDown);
		this.onKeyUp(key,callbackUp);
	}
};
var game_InputListener = function(event,keyMapping) {
	var _gthis = this;
	this.event = event;
	this.keyMapping = keyMapping;
	this.callbacks = [];
	window.document.body.addEventListener(event,function(e) {
		_gthis.handleEvent(e);
		return;
	});
};
game_InputListener.prototype = {
	handleEvent: function(e) {
		if(this.keyMapping != null) {
			if(this.compareEvent(e,this.keyMapping)) {
				this.executeCallbacks();
			}
		} else {
			this.executeCallbacks();
		}
	}
	,addCallback: function(callback) {
		this.callbacks.push(callback);
	}
	,executeCallbacks: function() {
		var _g = 0;
		var _g1 = this.callbacks;
		while(_g < _g1.length) {
			var callback = _g1[_g];
			++_g;
			callback();
		}
	}
	,compareEvent: function(e,key) {
		return e.key == key;
	}
};
var haxe_ds_List = function() {
	this.length = 0;
};
haxe_ds_List.prototype = {
	push: function(item) {
		var x = new haxe_ds__$List_ListNode(item,this.h);
		this.h = x;
		if(this.q == null) {
			this.q = x;
		}
		this.length++;
	}
};
var haxe_ds__$List_ListNode = function(item,next) {
	this.item = item;
	this.next = next;
};
var haxe_ds_StringMap = function() {
	this.h = { };
};
haxe_ds_StringMap.prototype = {
	setReserved: function(key,value) {
		if(this.rh == null) {
			this.rh = { };
		}
		this.rh["$" + key] = value;
	}
	,getReserved: function(key) {
		if(this.rh == null) {
			return null;
		} else {
			return this.rh["$" + key];
		}
	}
	,existsReserved: function(key) {
		if(this.rh == null) {
			return false;
		}
		return this.rh.hasOwnProperty("$" + key);
	}
};
var js__$Boot_HaxeError = function(val) {
	Error.call(this);
	this.val = val;
	if(Error.captureStackTrace) {
		Error.captureStackTrace(this,js__$Boot_HaxeError);
	}
};
js__$Boot_HaxeError.__super__ = Error;
js__$Boot_HaxeError.prototype = $extend(Error.prototype,{
});
var levels_MainLevel = function() {
	game_GameLevel.call(this);
};
levels_MainLevel.__super__ = game_GameLevel;
levels_MainLevel.prototype = $extend(game_GameLevel.prototype,{
	initGameObjects: function() {
		var storage = game_Game.getGame().getGameObjectStorage();
		storage.createGameObject(objects_Bunny);
	}
});
var objects_Bunny = function() {
	this.moveSpeed = 8;
	this.MOVE_RIGHT = 0;
	this.MOVE_DOWN = 0;
	this.MOVE_LEFT = 0;
	this.MOVE_UP = 0;
	this.direction = new utils_Vector(1.0,0.0);
	this.idealMovement = new utils_Vector();
	this.realMovement = new utils_Vector();
	game_GameObject.call(this,"assets/bunny.png");
	this.position.set(500,500);
};
objects_Bunny.__super__ = game_GameObject;
objects_Bunny.prototype = $extend(game_GameObject.prototype,{
	init: function() {
		var _gthis = this;
		this.input.onKeyPressed("w",function() {
			return _gthis.MOVE_UP = -1;
		},function() {
			return _gthis.MOVE_UP = 0;
		});
		this.input.onKeyPressed("a",function() {
			return _gthis.MOVE_LEFT = -1;
		},function() {
			return _gthis.MOVE_LEFT = 0;
		});
		this.input.onKeyPressed("s",function() {
			return _gthis.MOVE_DOWN = 1;
		},function() {
			return _gthis.MOVE_DOWN = 0;
		});
		this.input.onKeyPressed("d",function() {
			return _gthis.MOVE_RIGHT = 1;
		},function() {
			return _gthis.MOVE_RIGHT = 0;
		});
	}
	,update: function(dt) {
		this.idealMovement.y = this.MOVE_UP + this.MOVE_DOWN;
		this.idealMovement.x = this.MOVE_LEFT + this.MOVE_RIGHT;
		utils_Vector.normalize(this.idealMovement);
		if(this.idealMovement.getLength() != 0) {
			this.direction.x = this.idealMovement.x;
			this.direction.y = this.idealMovement.y;
		}
		this.idealMovement.setLength(this.moveSpeed);
		utils_Vector.lerp(this.realMovement,this.idealMovement,1.25);
		this.y += this.realMovement.y;
		this.x += this.realMovement.x;
	}
});
var utils_Vector = function(x,y) {
	if(y == null) {
		y = 0;
	}
	if(x == null) {
		x = 0;
	}
	this.x = x;
	this.y = y;
};
utils_Vector.normalize = function(vector) {
	var length = utils_Vector.calcLength(vector.x,vector.y);
	if(length != 0) {
		vector.x /= length;
		vector.y /= length;
	}
	return vector;
};
utils_Vector.calcLength = function(x,y) {
	return Math.sqrt(x * x + y * y);
};
utils_Vector.calcDifference = function(from,to) {
	var diffVector = new utils_Vector(0,0);
	diffVector.x = to.x - from.x;
	diffVector.y = to.y - from.y;
	return diffVector;
};
utils_Vector.lerp = function(from,to,deltaSpeed) {
	if(deltaSpeed == null) {
		deltaSpeed = 1;
	}
	var diffVector = utils_Vector.calcDifference(from,to);
	if(utils_Vector.calcLength(diffVector.x,diffVector.y) > deltaSpeed) {
		utils_Vector.normalize(diffVector).setLength(deltaSpeed);
	}
	from.x += diffVector.x;
	from.y += diffVector.y;
};
utils_Vector.prototype = {
	getLength: function() {
		return utils_Vector.calcLength(this.x,this.y);
	}
	,setLength: function(length) {
		this.x *= length;
		this.y *= length;
	}
};
var $_;
function $bind(o,m) { if( m == null ) return null; if( m.__id__ == null ) m.__id__ = $global.$haxeUID++; var f; if( o.hx__closures__ == null ) o.hx__closures__ = {}; else f = o.hx__closures__[m.__id__]; if( f == null ) { f = m.bind(o); o.hx__closures__[m.__id__] = f; } return f; }
if(typeof $global.$haxeUID == "undefined") $global.$haxeUID = 0;
var __map_reserved = {};
Object.defineProperty(js__$Boot_HaxeError.prototype,"message",{ get : function() {
	return String(this.val);
}});
Perf.MEASUREMENT_INTERVAL = 1000;
Perf.FONT_FAMILY = "Helvetica,Arial";
Perf.FPS_BG_CLR = "#00FF00";
Perf.FPS_WARN_BG_CLR = "#FF8000";
Perf.FPS_PROB_BG_CLR = "#FF0000";
Perf.MS_BG_CLR = "#FFFF00";
Perf.MEM_BG_CLR = "#086A87";
Perf.INFO_BG_CLR = "#00FFFF";
Perf.FPS_TXT_CLR = "#000000";
Perf.MS_TXT_CLR = "#000000";
Perf.MEM_TXT_CLR = "#FFFFFF";
Perf.INFO_TXT_CLR = "#000000";
Perf.TOP_LEFT = "TL";
Perf.TOP_RIGHT = "TR";
Perf.BOTTOM_LEFT = "BL";
Perf.BOTTOM_RIGHT = "BR";
Perf.DELAY_TIME = 4000;
Settings.COLOR_BLACK = 16777215;
Main.main();
})(typeof exports != "undefined" ? exports : typeof window != "undefined" ? window : typeof self != "undefined" ? self : this, typeof window != "undefined" ? window : typeof global != "undefined" ? global : typeof self != "undefined" ? self : this);
